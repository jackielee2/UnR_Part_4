==================================================================
32. HUD 만들기..
	[ 참고 : 언리얼 엔진 4 블루프린트 게임 만들기. ]
	-	위 책의 내용을 바탕으로 게임을 만들면서 언리얼을 익힙니다.
==================================================================

-----------------------------------
0]	개요..
-----------------------------------

	---------------------------
	-	[ HUD ]( Head Up Display )
	---------------------------

		-	게임의 인터페이스를 만드는 블루 프린트..
		-	게임 화면을 2D 평면으로 취급하며, 단위는 픽셀..
		-	[ HUD ]에서 출력하는 글자나 이미지는
			게임 화면 보다 우선적으로 출력됨..
		-	스코어나 메뉴 등을 표시할 때 사용..




-------------------------------
1]	[ HUD 블루 프린트 ] 생성..
-------------------------------
	
	-	[ 블루 프린트 클래스 ] > [ 검색 ] > "HUD"로 생성..
		-	[ 이름 ]	:	[ MyHUD ]

	-	[ MyGameMode ]에 연결..
		-	[ HUD ]는 [ GameMode 블루 프린트 ]에 설정해야 사용 가능..
		-	[ MyGameMode ] > [ 클래스 ] > [ HUD Class ]		:	[ MyHUD ]



-------------------------------
2]	[ 텍스트 ] 출력..
-------------------------------

	-------------
	-	개요..
	-------------

		-	[ HUD ]는 [ Receive Draw HUD 이벤트 ]로 시작..
			-	[ Receive Draw HUD 이벤트 ] 추가..
			-	[ DrawText 노드 ] 추가 후 연결..




	-------------
	-	적용..
	-------------

		-	이하 [ MyHUD ] 참고..




-----------------------------------
3]	[ 텍스트 ]를 화면 중앙에 정렬..
-----------------------------------

	-------------
	-	개요..
	-------------

		-	문자열을 특정 영역의 중앙에 출력하려면 두가지 정보가 필요..
			-	단, 가로 방향의 중앙만 고려..

			1)	출력할 영역의 너비( Width )..
				-	[ HUD ]에서 구해줌..

			2)	출력할 문자열의 길이..
				-	[ GetTextSize ]를 이용..

		-	문자열의 출력 위치	=	( 1) - 2) ) * 0.5




	----------------
	-	변수 추가..
	----------------

		-	[ MyHUD ] > [ 변수 ] 추가..
			-	
				===========================================================
						[ 이름 ]		|	[ 타입 ]	|	[ 설명 ]
				-----------------------------------------------------------
					[ ScreenWidth ]		|	[ float ]	|	화면의 폭..
				-----------------------------------------------------------
					[ ScreenHeight ]	|	[ float ]	|	화면의 높이..
				===========================================================




	-----------------------------------------
	-	화면의 사이즈를 저장하는 함수 생성..
	-----------------------------------------

		-	[ SetScreenSize ] 함수 추가..
			-	화면의 폭과 높이를 저장하는 함수..

		-	이하 [ MyHUD ] > [ SetScreenSize ] 참고..




	-----------------------------------------
	-	화면의 중앙 위치 계산 함수 생성..
	-----------------------------------------

		-	[ GetCenterPos ] 함수 추가..
			-	텍스트나 메뉴, 버튼 등의 [ UI ]를 화면의 중앙에 배치할 때
				[ UI ]의 폭을 입력 받아 출력 시작 위치를 반환하는 함수..

		-	이하 [ MyHUD ] > [ GetCenterPos ] 참고..




	----------------------------
	-	텍스트 출력 함수 생성..
	----------------------------

		-	[ DrawTextCenter ] 함수 추가..
			-	문자열을 화면의 중앙에 정렬하여 출력..

		-	이하 [ MyHUD ] > [ DrawTextCenter ] 참고..



	-----------
	-	적용..
	-----------

		-	[ MyHUD ] > [ 이벤트 그래프 ] > [ 화면 가운데( 너비만 적용 ) 문자열 출력하기.. ] 참고..




	----------------
	-	폰트 적용..
	----------------

		-	[ ch5. 블루 프린트 ] > [ 2-2. 블루 프린트 실습 ] > [ 11. 화면에 Text 표시.txt ] 참고..





----------------------
4]	[ 이미지 ] 출력..
----------------------

	-------------
	-	개요..
	-------------

		------------------------------------------
		-	[ HUD ]에서 이미지를 출력하는 방법..
		------------------------------------------
		
			( 참고 : [ Draw 관련 노드 ] 폴더 ) 

			1)	[ Draw Texture ]			( https://docs.unrealengine.com/4.27/en-US/BlueprintAPI/Canvas/DrawTexture/ )
				/ [ Draw Texture Simple ]	( https://docs.unrealengine.com/4.26/en-US/BlueprintAPI/HUD/DrawTextureSimple/ )
				-	2D 이미지 출력..
				-	접미사 [ Simple ]은 이미지 처리 단순화..

			2)	[ Draw Material ]			( https://docs.unrealengine.com/4.27/en-US/BlueprintAPI/Canvas/DrawMaterial/ )
				/ [ Draw Material Simple ]	( https://docs.unrealengine.com/4.27/en-US/BlueprintAPI/HUD/DrawMaterialSimple/ )
				-	머터리얼 출력..



		-----------------
		-	주요 속성..
		-----------------

			-	Screen X, Y
				-	이미지의 출력 위치..
				-	[ 단위 ]	:	[ 픽셀 ]..
				-	[ 원점 ]	:	[ 화면 좌상단 ]..

			-	Screen W, H
				-	이미지의 폭과 높이..
				-	[ 단위 ]	:	[ 픽셀 ]..

			-	Texture U, V
				-	출력할 이미지의 기준 위치를 관리하는 UV 좌표계..
				-	이미지의 좌상단	:	[ 0, 0 ]
							 우하단	:	[ 1, 1 ]

			-	Texture UWidth, VHeight
				-	이미지 반복( 타일링 ) 횟수..
				-	이미지 전체 출력	:	[ 1, 1 ]

			-	Tint Color
				-	이미지에 덧씌울 색상..

			-	Blend Mode
				-	이미지 연출방법..
				-	투명색, 완전 불투명등의 옵션 제공..

			-	Scale
				-	이미지 확대 비율..

			-	Scale Position
				-	이미지 확대 시 화면의 좌표 ( Screen X, Y )에도 적용여부 체크..

			-	Rotation
				-	이미지 회전 각도..
				-	시계방향 회전..
				-	60분법 적용( Degree )..

			-	Rot Pivot
				-	이미지 회전 시 중심점..
				-	[ UV 좌표계 ] 사용..




	----------------------
	5]	[ UV 좌표 ]..
	----------------------

		---------------
		-	[ 매핑 ]..
		---------------

			-	[ 3D 오브젝트 ]의 표면을 [ 2D 이미지( 텍스처 ) ]로 감싸는 것..
			-	텍스처의 기준점, 그리는 방향, 텍스처의 반복 횟수 등의 정보 필요..
			-	[ 3D 오브젝트 ]의 3차원 축인 ( x, y, z )에 대응해서 생겨난 개념이
				[ 2D 이미지 ]의 축을 ( u, v, w )로 정의하는 방법..
				-	[ 2D 이미지 ]는 z축이 필요하지 않으므로 ( u, v )축을 사용..


		------------------
		-	[ UV 좌표 ]..
		------------------

			-	텍스처 내부의 위치를 표시하는 논리적인 좌표..
			-	[ 매핑 ]할때 텍스처의 크기와 상관없이
				이미지의 좌상단( 0, 0 ), 우하단( 1, 1 )로 정의..
			-	일반적으로 	[ 3D 오브젝트 ]를 [ 매핑 ]할 때 텍스처 전체를 사용하지만
				텍스처의 일부만 사용하거나, 반복해서 사용( 타일링 )하는 것도 가능..
				-	일부만 사용	:	0 ~ 1 사이 값..
					반복 사용	:	1 보다 큰 값..
					[ 참고 : UV좌표와 타일링.png ]

				-	언리얼의 텍스처 타일링 방식..
					
					1)	[ HUD ]의 [ Draw ]		:	[ Texture UWidth ], [ Texture VHeight ]
					2)	[ 머터리얼 에디터 ]		:	[ TextureCoordinate ] > [ UTiling ],
													[ TextureCoordinate ] > [ VTiling ]



	------------------------
	6]	[ Draw Material ]..
	------------------------
	
		-	머터리얼을 화면에 표시..
		-	[ 머터리얼 ] > [ 이미시브 컬러 ]에 설정된 값만 반영됨..
			-	[ 머터리얼 ] > [ 이미시브 컬러 ]가 없는 머터리얼은 
				검은색으로 연출됨..
	
		[ 참고 : [ MyHUD ] > [ 이벤트 그래프  ] > [ Draw Texture , Draw Material 테스트.. ] ]




==================================================================//